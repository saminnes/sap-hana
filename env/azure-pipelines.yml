# This Azure pipeline YAML contains tests to validate and verify the pull requests made for automated deployment of SAP landscape.
# This pipeline will only run all the tests if the PR is made from a branch of Azure/sap-hana repo.
# Branches from forked repositories will fail in the Azure provider authentication phase due to security reason
# A pipeline with no CI trigger
trigger: none
# Only trigger build when a PR is opened
pr:
  autoCancel: false # Don't cancel the current build
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - monitor/*
    - deploy/v2/*
    - templates/*
    - tools/*
jobs:
- job: single_node_hana
  variables:
    - group: azure-config-variables
    - group: azure-sap-hana-pipeline-secrets
  pool:
    vmImage: "ubuntu-16.04"
  displayName: "Test deployment of single node hana"
  steps:
  - checkout: self  # self represents the repo where the initial Pipelines YAML file was found
    clean: "all"
    path: "sap-hana"  # path to check out source code, relative to the agent's build directory
    persistCredentials: boolean  # set to 'true' to leave the OAuth token in the Git config after the initial fetch
  - script: |
      pip install packaging
      pip install --ignore-installed pyyaml ansible[azure]
      sudo -H pip install msrest==0.6.0
    displayName: 'Install python tools'
  - script: |
      ssh-keygen -b 4096 -t rsa -f /tmp/sshkey -q -N ""
      export BUILD_MACHINE_IP=$(dig +short myip.opendns.com @resolver1.opendns.com)
      cp deploy/vm/test/terraform.tfvars deploy/vm/modules/single_node_hana
      cd deploy/vm/modules/single_node_hana
      echo allow_ips = [\"$BUILD_MACHINE_IP\"] >> terraform.tfvars
      echo "Terraform apply started. Resource group: $TF_VAR_az_resource_group"  
      terraform init
      terraform apply -auto-approve -no-color
    displayName: 'Create single-node HANA'
    env:
      TF_VAR_azure_service_principal_id: $(hana-pipeline-spn-id)
      TF_VAR_azure_service_principal_pw: $(hana-pipeline-spn-pw)
      TF_VAR_az_resource_group: single-node-$(Build.BuildId)
      TF_VAR_az_domain_name: single-node-$(Build.BuildId)
      TF_VAR_url_sap_sapcar_linux: $(hana-int-sapcar-721-linux)
      TF_VAR_url_sap_hdbserver: $(hana-int-hana2sps03-server)
      TF_VAR_url_hana_studio_linux: $(hana-int-hanastudio-linux)
      TF_VAR_pw_db_system: $(hana-int-pw-db-system)
      TF_VAR_pw_os_sidadm: $(hana-int-pw-sid-adm)
      TF_VAR_pw_os_sapadm: $(hana-int-pw-sap-adm)
      TF_VAR_pw_hacluster: $(hana-int-pw-sap-adm)
      AZURE_CLIENT_ID: $(hana-pipeline-spn-id)
      AZURE_SECRET: $(hana-pipeline-spn-pw)
      AZURE_TENANT: $(landscape-tenant)
      AZURE_SUBSCRIPTION_ID: $(landscape-subscription)
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
  - script: |
      echo "Terraform destroy to destroy the deployment"
      cd deploy/vm/modules/single_node_hana
      terraform destroy -auto-approve -no-color
    displayName: 'Destroy single-node HANA'
    env:
      TF_VAR_azure_service_principal_id: $(hana-pipeline-spn-id)
      TF_VAR_azure_service_principal_pw: $(hana-pipeline-spn-pw)
      TF_VAR_az_resource_group: single-node-$(Build.BuildId)
      TF_VAR_az_domain_name: single-node-$(Build.BuildId)
      TF_VAR_url_sap_sapcar_linux: $(hana-int-sapcar-721-linux)
      TF_VAR_url_sap_hdbserver: $(hana-int-hana2sps03-server)
      TF_VAR_url_hana_studio_linux: $(hana-int-hanastudio-linux)
      TF_VAR_pw_db_system: $(hana-int-pw-db-system)
      TF_VAR_pw_os_sidadm: $(hana-int-pw-sid-adm)
      TF_VAR_pw_os_sapadm: $(hana-int-pw-sap-adm)
      TF_VAR_pw_hacluster: $(hana-int-pw-sap-adm)
      AZURE_CLIENT_ID: $(hana-pipeline-spn-id)
      AZURE_SECRET: $(hana-pipeline-spn-pw)
      AZURE_TENANT: $(landscape-tenant)
      AZURE_SUBSCRIPTION_ID: $(landscape-subscription)
      ARM_CLIENT_ID: $(hana-pipeline-spn-id)
      ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
      ARM_TENANT_ID: $(landscape-tenant)
      ARM_SUBSCRIPTION_ID: $(landscape-subscription)
- job: cleanup_rg
  variables:
      - group: azure-config-variables
      - group: azure-sap-hana-pipeline-secrets
  dependsOn: single_node_hana
  condition: or(succeededOrFailed(), always())
  steps:
  - script: |
      az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
      if $(az group exists -n single-node-$(Build.BuildId)); then
         az group delete -n single-node-$(Build.BuildId) --yes --subscription $(landscape-subscription)
      fi     
    displayName: 'Delete resource group single-node-$(Build.BuildId)'
